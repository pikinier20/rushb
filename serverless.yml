service: rushb

frameworkVersion: '2'

plugins:
  - serverless-resources-env
  - serverless-s3-sync

provider:
  name: aws
  runtime: java8
  lambdaHashingVersion: 20201221
  region: eu-west-1
  timeout: 900
  memorySize: 2048
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 's3:*'
            - 'sqs:*'
          Resource:
            - '*'

package:
  individually: true

functions:
  crawler:
    handler: rushb.crawler.lambda.LambdaHandler
    package:
      artifact: crawler/target/scala-2.13/rushb-crawler.jar
    events:
      - schedule: cron(0 1 * * ? *)
    custom:
      env-resources:
        - linksQueue

custom:
  s3Sync:
    - bucketName: 'rushb-deployment-bucket'
      localDir: outputs
      acl: public-read

resources:
  Resources:
#    ec2Role:
#      Type: AWS::IAM::Role
#      Properties:
#        Path: /
#        RoleName: ec2Role
#        AssumeRolePolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            - Effect: "Allow"
#              Principal:
#                Service:
#                  - ec2.amazonaws.com
#              Action: sts:AssumeRole
#        Policies:
#          - PolicyName: myPolicyName
#            PolicyDocument:
#              Version: "2012-10-17"
#              Statement:
#                - Effect: "Allow"
#                  Action:
#                    - "s3:*"
#                  Resource:
#                    - '*'
#                - Effect: "Allow"
#                  Action:
#                    - "SQS:SendMessage"
#                    - "SQS:ReceiveMessage"
#                    - "SQS:DeleteMessage"
#                    - "SQS:GetQueueUrl"
#                  Resource:
#                    - "*"
#    instanceProfile:
#      Type: AWS::IAM::InstanceProfile
#      Properties:
#        Path: "/"
#        Roles:
#          - !Ref ec2Role
    linksQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "links-queue.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true

    downloadedDemosQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "downloaded-demos-queue.fifo"
        FifoQueue: true
        ContentBasedDeduplication: true

    downloadedDemosBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: "downloaded-demos-bucket"
        AccessControl: PublicRead
      DeletionPolicy: Delete

    deploymentBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: "rushb-deployment-bucket"
        AccessControl: PublicRead
      DeletionPolicy: Delete

# TODO This is needed in order to create role and not hard-code it
#    spotRole:
#      Type: 'AWS::IAM::Role'
#      Properties:
#        RoleName: "AmazonEC2SpotFleetTaggingRole"
#        AssumeRolePolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            - Effect: Allow
#              Principal:
#                Service:
#                  - spotfleet.amazonaws.com
#              Action:
#                - 'sts:AssumeRole'
#                - 'ec2:*'
#        AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Sid":"","Effect":"Allow","Principal":{"Service":"spotfleet.amazonaws.com"},"Action":"sts:AssumeRole"}]}'


    spotFleetDownloader:
      Type: 'AWS::EC2::SpotFleet'
      Properties:
        SpotFleetRequestConfigData:
          TargetCapacity: 1
          IamFleetRole: 'arn:aws:iam::743262912284:role/aws-ec2-spot-fleet-tagging-role'
#            Fn::GetAtt:
#              - spotRole
#              - 'Arn'
          LaunchSpecifications:
            - ImageId: 'ami-04dd4500af104442f'
              InstanceType: 'm3.medium'
              UserData:
                Fn::Base64:
                  Fn::Sub:
                  - #!/bin/bash -x
                    export CF_linksQueue=${LINKS_QUEUE} && \
                    export CF_downloadedDemosQueue=${DOWNLOADED_DEMOS_QUEUE} && \
                    sudo yum install -y java-1.8.0-openjdk-devel && \
                    wget https://rushb-deployment-bucket.s3.eu-west-1.amazonaws.com/rushb-downloader.jar && \
                    java -jar rushb-downloader.jar
                  - { LINKS_QUEUE: !Ref linksQueue, DOWNLOADED_DEMOS_QUEUE: !Ref downloadedDemosQueue }
              IamInstanceProfile:
                Arn: "arn:aws:iam::743262912284:instance-profile/rushbRole"


    spotFleetParser:
      Type: 'AWS::EC2::SpotFleet'
      Properties:
        SpotFleetRequestConfigData:
          TargetCapacity: 1
          IamFleetRole: 'arn:aws:iam::743262912284:role/aws-ec2-spot-fleet-tagging-role' #TODO change to run on your own
          #            Fn::GetAtt:
          #              - spotRole
          #              - 'Arn'
          LaunchSpecifications:
            - ImageId: 'ami-04dd4500af104442f'
              InstanceType: 'm3.medium'
              UserData:
                Fn::Base64:
                  Fn::Sub:
                    - #!/bin/bash -x
                      export CF_downloadedDemosQueue=${DOWNLOADED_DEMOS_QUEUE} && \
                      sudo yum install -y java-1.8.0-openjdk-devel && \
                      wget https://rushb-deployment-bucket.s3.eu-west-1.amazonaws.com/rushb-parser.jar && java -jar rushb-parser.jar
                    - { DOWNLOADED_DEMOS_QUEUE: !Ref downloadedDemosQueue }
              IamInstanceProfile:
                Arn: "arn:aws:iam::743262912284:instance-profile/rushbRole"

#    capacityProvider:
#      Type: 'AWS::ECS::CapacityProvider'
#      Properties:
#        AutoScalingGroupProvider:
#          -  AutoScalingGroupArn:

#    ecsCluster:
#      Type: 'AWS::ECS::Cluster'
#      Properties:
#        CapacityProviders:
#          - 'EC2'
#        ClusterName: 'rush-b-cluster'
#        DefaultCapacityProviderStrategy:
#          - CapacityProvider: !Ref capacityProvider
#            Weight: 1



#    taskdefinition:
#      Type: 'AWS::ECS::TaskDefinition'
#      Properties:
#        ContainerDefinitions:
#          - Name: rush-b
#            Cpu: 2
#            Essential: 'true'
#            Image: 'openjdk:8'
#            Memory: '2048'
#            Command:
#              - >-
#                /bin/sh -c "wget https://rushb-deployment-bucket.s3.eu-west-1.amazonaws.com/rushb-downloader.jar && java -jar rushb-downloader.jar"
#            EntryPoint:
#              - sh
#              - '-c'
#            Environment:
#              - Name: "CF_linksQueue"
#                Value: !Ref linksQueue
#              - Name: "CF_downloadedDemosQueue"
#                Value: !Ref downloadedDemosQueue
#              - Name: "CF_demoBucket"
#                Value: !Ref downloadedDemosBucket

#    service:
#      Type: 'AWS::ECS::Service'
#      Properties:
#        Cluster: !Ref ecsCluster
#        DesiredCount: '1'
#        TaskDefinition: !Ref taskdefinition
#        LaunchType: 'EC2_SPOT'

#    spotLaunchTemplate:
#      Type: "AWS::EC2::LaunchTemplate"
#      Properties:
#        LaunchTemplateName: "spot-template"
#        ImageId:
#        LaunchTemplateData:
#          InstanceMarketOptions:
#            MarketType: "spot"
#            SpotOptions:
#              InstanceInterruptionBehavior: "hibernate"

#    autoScalingSpot:
#      Type: "AWS::AutoScaling::AutoScalingGroup"
#      Properties:
#        MaxSize: "5"
#        MinSize: "0"
#        MixedInstancesPolicy:
#          InstancesDistribution:
#            SpotInstancePools: "4" # Max - 1 because in worst-case scenario we would like to have at least one worker
#          LaunchTemplate:
#            LaunchTemplateSpecification:
#              Version: "1.0" #TODO
#              LaunchTemplateName: "spot-template"


